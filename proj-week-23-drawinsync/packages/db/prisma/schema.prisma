// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  userName           String              @unique
  email              String              @unique
  password           String
  profilePic         String?
  Board              Board[]
  BoardCollaborators BoardCollaborator[]
  Elements           Element[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("user")
}

model Board {
  id                 String              @id @default(uuid())
  boardName          String
  slug               String              @unique
  ownerId            String              @map("onwerId")
  Onwer              User                @relation(references: [id], fields: [ownerId])
  BoardCollaborators BoardCollaborator[]
  Elements           Element[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("board")
}

model BoardCollaborator {
  collaboratorId   String
  boardId          String
  collaboratorType CollaboratorType @default(VIEWER)
  Collaborator     User             @relation(references: [id], fields: [collaboratorId])
  Board            Board            @relation(references: [id], fields: [boardId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@id([collaboratorId, boardId])
  @@index([boardId])
}

model Element {
  id              String    @id @default(uuid())
  shapeType       ShapeType
  shapeProperties Json
  boardId         String
  authorId        String
  Board           Board     @relation(references: [id], fields: [boardId])
  Author          User      @relation(references: [id], fields: [authorId])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  @@map("element")
}

enum CollaboratorType {
  EDITOR
  VIEWER
}

enum ShapeType {
  RECTANGLE
  CIRCLE
  LINE
}
